ArrayList<Circle> circles = new ArrayList<Circle>();
Circle c;
import com.hamoid.*;
import processing.serial.*; 

Serial port;
//boolean firstContact = false; 

int data;
//int[] serialInArray = new int[3];
//int serialCount = 0; 

VideoExport videoExport;

void setup() {
  size(620, displayHeight);
  videoExport = new VideoExport(this);
  videoExport.startMovie();
  port = new Serial (this, Serial.list ()[3], 9600);
//  println(Serial.list());
}

void draw() {
  background(255);
  for (int i = 0; i < circles.size(); ++i) {
    for (int k = 0; k < circles.size(); ++k) {
      if (i!=k) {
        PVector f = circles.get(k).attract(circles.get(i));
        circles.get(i).applyForce(f);
        circles.get(i).link(circles.get(k));
      }
    }
    circles.get(i).update();
    circles.get(i).display();
    circles.get(i).checkEdges();
  }
  videoExport.saveFrame();
}

void serialEvent(Serial myPort) {
  if (port.available() > 40) {
    // myPort.clear ();
    data = port.read();
    println(data);
    c = new Circle ();
    circles.add(c);
  }
}
//void serialEvent(Serial myPort) {
//  int data = myPort.read();
//  // if this is the first byte received, and it's an A,
//  // clear the serial buffer and note that you've
//  // had first contact from the microcontroller.
//  // Otherwise, add the incoming byte to the array:
//  if (firstContact == false) {
//    if (data == 'A') {
//      myPort.clear();   // clear the serial port buffer
//      firstContact = true;  // you've had first contact from the microcontroller
//      myPort.write('A');  // ask for more
//    }
//  } else {
//    // Add the latest byte from the serial port to array:
//    serialInArray[serialCount] = data;
//    serialCount++;
//    // If we have 3 bytes:
//    if (serialCount > 2 ) {
//      c = new Circle ();
//      circles.add(c);
//    }
//  }
//}

//void serialEvent(Serial myPort) {
//  int data = myPort.read();
//  if (serialCount > 2 ) {
//    data = port.read();
//    c = new Circle ();
//    circles.add(c);
//  }
//}

class Circle {
  PVector location, velocity, acceleration;
  float G, mass, size;

  Circle() {
    location = new PVector(random(width), random(height));
    velocity = new PVector(0, 0);
    acceleration = new PVector(0, 0);
    G = 0.5; //normal = 0.3
    mass = random(4, 6);
    size = mass;
  }

  void applyForce(PVector force) {
    PVector f = force.get();
    f.div(mass);
    acceleration.add(f);
  }

  void update() {
    velocity.add(acceleration);
    location.add(velocity);
    acceleration.mult(0);
  }

  void display() {
    noStroke();
    fill(0);
    ellipse(location.x, location.y, size, size);
  }

  void link(Circle c) {
    stroke(0, 1750);
    PVector dist = PVector.sub(c.location, location);
    if (dist.mag()<150) {
      line(location.x, location.y, c.location.x, c.location.y);
    }
  }

  PVector attract(Circle c) {
    PVector force = PVector.sub(location, c.location);
    float distance = force.mag();
    distance = constrain(distance, 20, 25);
    force.normalize();
    float strength = (G*mass*c.mass)/(distance*distance);
    force.mult(strength);
    return force;
  }

  void checkEdges() {
    if (location.x < size/2) {
      location.x = size/2;
      velocity.x *= -1;
    } else if (location.x > width-size/2) {
      location.x = width-size/2;
      velocity.x *= -1;
    }

    if (location.y < size/2) {
      location.y = size/2;
      velocity.y *= -1;
    } else if (location.y > height-size/2) {
      location.y = height-size/2;
      velocity.y *= -1;
    }
  }
  //void keyPressed() {  //salve video 
  //  if (key == 'q') {
  //    videoExport.endMovie();
  //    exit();
  //  }
  // }
}
